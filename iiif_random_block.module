<?php

/**
 * @file
 * Primary module file for the IIIF Random Block module.
 */

use Drupal\Core\Database\Database;

/**
 * Helper function to select a canvas based on defined rules.
 *
 * @param array $canvases
 * The array of canvases from the manifest.
 * @param string $rules_string
 * The rules defined in the settings form.
 *
 * @return array|null
 * The selected canvas array, or null if none could be selected.
 */
function _iiif_random_block_get_canvas_by_rules(array $canvases, string $rules_string): ?array {
  $canvas_count = count($canvases);
  if ($canvas_count === 0) {
    return NULL;
  }

  $rules = preg_split('/\\r\\n|\\r|\\n/', $rules_string, -1, PREG_SPLIT_NO_EMPTY);
  $selected_index = -1;
  $rule_condition_was_met = FALSE;

  foreach ($rules as $rule) {
    if (strpos($rule, '=>') === false) {
      continue;
    }
    [$condition, $action] = array_map('trim', explode('=>', $rule, 2));

    // Check if the condition for this rule matches the canvas count.
    $condition_met = FALSE;
    if (strpos($condition, '+') !== false) {
      $min = (int) $condition;
      if ($canvas_count >= $min) {
        $condition_met = TRUE;
      }
    }
    elseif (strpos($condition, '-') !== false) {
      [$min, $max] = array_map('intval', explode('-', $condition));
      if ($canvas_count >= $min && $canvas_count <= $max) {
        $condition_met = TRUE;
      }
    }
    else {
      if ($canvas_count == (int) $condition) {
        $condition_met = TRUE;
      }
    }

    if ($condition_met) {
      // A rule's condition has matched. We will not use the final fallback.
      $rule_condition_was_met = TRUE;
      $action = strtolower($action);

      if ($action === 'last') {
        $selected_index = $canvas_count - 1;
      }
      elseif (strpos($action, 'random') !== false) {
        preg_match('/random\((\d+)-(\d+|last)(-(\d+))?\)/', $action, $matches);

        $rand_min = 0;
        $rand_max = $canvas_count - 1;

        if (!empty($matches)) {
          $rand_min = (int) $matches[1] - 1;
          $end_val = $matches[2];
          $offset = isset($matches[4]) ? (int) $matches[4] : 0;

          if ($end_val === 'last') {
            $rand_max = $canvas_count - 1 - $offset;
          }
          else {
            $rand_max = (int) $end_val - 1;
          }
        }

        $rand_min = max(0, $rand_min);
        $rand_max = min($canvas_count - 1, $rand_max);

        // Only select if the range is valid.
        if ($rand_min <= $rand_max) {
          $selected_index = mt_rand($rand_min, $rand_max);
        }
        // If the range is invalid, $selected_index remains -1.
      }
      else {
        $selected_index = (int) $action - 1;
      }

      // The first matching rule wins, so we exit the loop.
      break;
    }
  }

  // Fallback to random(all) ONLY if no rule condition was ever met.
  if (!$rule_condition_was_met) {
    $selected_index = mt_rand(0, $canvas_count - 1);
  }

  // Final check for a valid index before returning.
  if ($selected_index < 0 || $selected_index >= $canvas_count) {
    // This can happen if a rule's condition matched, but its action was
    // impossible (e.g., "5 => 10" or "random(3-2)"). In this case,
    // we return NULL to signal that no valid selection could be made.
    return NULL;
  }

  return $canvases[$selected_index] ?? NULL;
}


/**
 * Implements hook_cron().
 */
function iiif_random_block_cron() {
  $logger = \Drupal::logger('iiif_random_block');
  $state = \Drupal::state();
  $time = \Drupal::time();
  $config = \Drupal::config('iiif_random_block.settings');

  $cron_interval = $config->get('cron_interval') ?: 86400;
  $last_run = $state->get('iiif_random_block.last_cron_run', 0);

  if (($time->getRequestTime() - $last_run) < $cron_interval) {
    return;
  }

  $logger->info('Cron job started: Calling updateDisplayedImages.');

  // Call the static method to do the work, passing values directly.
  SettingsForm::updateDisplayedImages(
    (int) $config->get('number_of_images'),
    (int) $config->get('image_size'),
    (string) $config->get('selection_rules')
  );

  $state->set('iiif_random_block.last_cron_run', $time->getRequestTime());
  $logger->info('Cron job finished.');
}

/**
 * Implements hook_theme().
 */
function iiif_random_block_theme($existing, $type, $theme, $path) {
  return [
    'iiif_random_block' => [
      'variables' => [
        'items' => [],
        'source_link_text' => '',
        'source_link' => '',
      ],
    ],
  ];
}
